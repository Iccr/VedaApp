#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'veda'

rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/veda` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/veda now"
  exit 64
end

include GLI::App


command :generate do |c|
  c.desc 'Generate'
  c.switch :qr

  c.action do |global_options,options,args|

    if options[:qr]
      puts 'generate qr'
      path = args.first
      # raise 'cant help at this time'
      raise 'File name not given' if path.nil?
      raise "#{path}. File does not exist." unless File.file?(path)
      generate_qr path
    end

  end
end


on_error do |exception|
  # puts 'error occured'
  true
end

def generate_qr path
  require 'fileutils'
  qr_storyboard_path = self.root + '/lib/QRCodeScanner/QRScanner.storyboard'
  qr_viewcontroller_path = self.root + '/lib/QRCodeScanner/QRCodeScannerViewController.swift'
  dest_folder = path.split('/').reverse.drop(1).reverse.join('/')
  FileUtils.cp(qr_storyboard_path, dest_folder)
  FileUtils.cp(qr_viewcontroller_path, dest_folder)
  puts "successfully generated qr scanner in path: #{dest_folder}"
  viewcontroller_name = path.split('/').reverse.first.split('.').first

  f = File.open(path, 'a')
  f.write(extension viewcontroller_name)
  f.close
  fileContent = File.readlines(path)
  puts fileContent
end

def self.root
    File.expand_path '../..', __FILE__
end

def extension name
  extension = <<-EOS
extension #{name} {
     func scan() {
        self.openQRCodeScanner(source: self) { (viewcontroller, string) in
            let qrString = string
            print(qrString)
        }
     }

     func openQRCodeScanner(source: UIViewController, completion: @escaping (QRCodeScannerViewController, String)->()) {
      if let vc = UIStoryboard(name: "QRScanner", bundle: nil).instantiateInitialViewController() as? QRCodeScannerViewController {
          vc.onObtained = completion
          source.present(vc, animated: true, completion: nil)
      }
  }
}
  EOS
end

exit run(ARGV)
