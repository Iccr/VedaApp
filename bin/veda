#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'veda'
require 'qR'
require 'fetcher'

rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/veda` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/veda now"
  exit 64
end

include GLI::App
# inclu
subcommand_option_handling :normal

command :generate do |c|
  c.desc 'Generate'
  c.switch :qr
  c.switch :Multimedia
  c.switch :model

desc 'genefates model in folder from, json file'
c.command :model do |m|
  m.flag [:f,:filename,'file_path_for_json_file']
  m.flag [:u,:url,'url_for_json']
  m.switch [:r, :realm]

  m.action do |global_options, options, args|
    puts 'model generated'
    if options[:f]
      filepath = options[:f]
      if File.exist?filepath
        puts "file does not exists: #{filepath}"
      else
        parser = Parser.new filepath, options[:r]
      end
    elsif  options[:u]
      config_path = options[:f]
      if File.exist?config_path
        puts "file does not exists: #{filepath}"
      else
        # create a parser
      end
    end
  end
end

desc 'genefates qr at specified path'
c.command :qr do |q|
  q.action do |global_options, options, args|
      path = args.first
      raise 'File name not given' if path.nil?
      raise "#{path}. File does not exist." unless File.file?(path)
      generate_qr path
    puts 'qr command exec'
  end
end

desc 'genefates multimedia at specified path'
c.command :mm do |m|
  m.action do |global_options, opotions, args|
    puts 'multimedia file'
  end
end
#   c.action do |global_options,options,args|
#
#     puts "global options is #{global_options}"
#     puts "options is #{options}"
#     puts "args is #{args}"
#     puts "option[:qr] is #{options[:qr]}"
#
#     if options[:qr]
#       puts 'generate qr inside optopm[:qr]'
#       path = args.first
#       raise 'File name  |m|not given' if path.nil?
#       raise "#{path}. File does not exist." unless File.file?(path)
#       generate_qr path
#     end
#
#     if options[:model]
#       puts 'generate model'
#       json = args.first
#       puts json
#     end
#
# #  TODO_ generate multimedia path
#     if options[:Multimeda]
#       puts 'generate Multimeda manager'
#       path = args.first
#       raise 'File name not given' if path.nil?
#       raise "#{path}. File does not exist." unless File.file?(path)
#       generate_multimedia path
#     end
#
#
#   end
end


on_error do |exception|
  # puts 'error occured'
  true
end

def generate_qr path
  qr = QR::Qr.new
  qr.generate_qr path
end

def generate_multimedia

end
exit run(ARGV)
