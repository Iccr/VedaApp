#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'veda'
require 'qR'
# require "parser.rb"
require 'parser'


rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/veda` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/veda now"
  exit 64
end

include GLI::App
# inclu
subcommand_option_handling :normal

command :generate do |c|
  c.desc 'Generate'
  c.switch :qr
  c.switch :Multimedia
  c.switch :model

desc 'generates model in folder from, json file'
c.command :model do |m|

  m.flag [:u,:url,'url_for_json']
  m.switch [:r, :realm]
  m.flag [:f, :file, 'file_path_to_json']
  # m.flag [:config, :c]
  m.command :config do |config|
    config.flag [:path, :p]
    config.action do |global_options, options, args|
      puts 'config action'
      root = File.expand_path '../..', __FILE__  #todo make file handler class
     file_name = "config.json"
      src_path = root + "/lib/#{file_name}"
      dest_path =  Dir.pwd
      if File.exist?(dest_path + "/" + "#{file_name}")
        puts " #{file_name} already exists in #{dest_path }"
      else
        puts "creating config file in #{dest_path}"
        FileUtils.cp(src_path, dest_path)
        puts "created #{file_name} to #{dest_path}"
      end
    end
  end

  m.action do |global_options, options, args|
    desc 'generates config file at specified path'

    # puts 'model generated'
    if options[:f]
      filepath = Dir.pwd + "/" + options[:f]
      puts filepath
      if File.exist?(filepath)
        puts "creating parser with file #{filepath} and #{options[:realm]}"
        parser = Parser.new filepath, options[:realm]
      else
        puts "cannot find file: #{filepath}"
        puts "use: 'veda generate model config' to generate the configuration file at working directory."
      end
    elsif  options[:u]
      config_path = options[:u]
      if File.exist?config_path
        puts "creating parser with url #{filepath} and #{options[:realm]}"
        parser = Parser.new filepath, options[:realm]
      else
        # create a parser
        puts "file does not exists: #{config_path}"
      end
    end
  end
end

desc 'generates qr at  path specified after -f flag'
c.command :qr do |q|
  q.flag [:f,:filename,'file_path_for_viewcontroller']
  q.action do |global_options, options, args|
      path = options[:f]
      puts "no file path given. \n HINT: veda generate qr -f path_to_viewController.swift_file" if path.nil?
      if File.file?(path)
        generate_qr path
      else
        raise "#{path}. File does not exist."
      end
  end
end

desc 'genefates multimedia at specified path'
c.command :mm do |m|
  m.action do |global_options, opotions, args|
    puts 'multimedia file'
  end
end
end


on_error do |exception|
  # puts 'error occured'
  true
end

def generate_qr path
  qr = QR::Qr.new
  qr.generate_qr path
end

def generate_multimedia

end
exit run(ARGV)
